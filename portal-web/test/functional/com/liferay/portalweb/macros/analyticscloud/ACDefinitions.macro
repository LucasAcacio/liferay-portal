definition {

	@summary = "Navigates to a definition in the Definitions screen. \
	@param definitionType the name of the definition that will be navigated to."
	macro assertIndividualAttributesSource {
		var key_dataSourceName = "${dataSourceName}";

		for (var attributeName : list "${attributeList}") {
			Type(
				locator1 = "ACSettings#SEARCH_BAR",
				value1 = "${attributeName}");

			ACDefinitions.openIndividualAttributeDetails(attributeName = "${attributeName}");

			AssertTextEquals(
				locator1 = "ACDefinitions#SOURCE_NAME",
				value1 = "${dataSourceName}");

			ACUtils.closeModal();
			ACUtils.clearSearchBar();
		}
	}

	macro goToDefinitionType {
		var key_definitionType = "${definitionType}";
		Click(locator1 = "ACDefinitions#DEFINITION_TYPE");
	}

	macro openIndividualAttributeDetails {
		var key_attributeName = "${attributeName}";
		Click(locator1 = "ACDefinitions#ATTRIBUTE_NAME");
	}

	macro addSearchQuerySuccessfully {
		Click(locator1 = "Button#PLUS");

		Type(
			locator1 = "ACDefinitions#SEARCH_QUERY_INPUT",			
			value1 = "${query}");

		Button.clickSave();

		Alert.viewSuccessMessage();
	}

	macro viewSearchQuery {
		AssertElementPresent(
			key_query = "${query}",
			locator1 = "ACDefinitions#PRESENT_SEARCH_QUERY_INPUT");
	}

	macro deleteSearchQuerySuccessfully {
		Click(
			key_query = "${query}",
			locator1 = "ACDefinitions#SEARCH_QUERY_DELETE_BUTTON");

		Button.clickSave();

		Alert.viewSuccessMessage();
	}

	macro noViewSearchQuery {
		AssertElementNotPresent(
			key_query = "${query}",
			locator1 = "ACDefinitions#PRESENT_SEARCH_QUERY_INPUT");
	}

}