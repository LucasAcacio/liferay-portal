@component-name = "portal-analytics-cloud"
definition {

	property analytics.cloud.enabled = "true";
	property minimum.slave.ram = "24";
	property portal.release = "false";
	property portal.upstream = "true";
	property slave.label = "slave-1";
	property testray.main.component.name = "Analytics Cloud";

	setUp {
		ACUtils.launchAC();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		ACUtils.tearDownAC();
	}

	@description = "Automation ID: LRAC-9051 | Test Summary: Admin can be edited or removed"
	@ignore = "true"
	@priority = "3"
	test AdminCanBeEditedOrRemoved {

		// TODO LRAC-9051 AdminCanBeEditedOrRemoved

	}

	@description = "Automation ID: LRAC-9052 | Test Summary: Admin can be selected in the user list"
	@priority = "3"
	test AdminCanBeSelected {
		task ("Go to settings and go to user management") {
			ACNavigation.goToSettings();

			ACSettings.goToUserManagement();
		}

		task ("Search for a Administrator user and check if it is possible to select") {
			ACUtils.searchBar(searchItem = "corbin.murakami@faro.io");

			ACInterests.clickKeywordCheckbox(keyword = "corbin murakami");

			AssertChecked.assertCheckedNotVisible(locator1 = "ACSettings#USER_LIST_CHECKBOX");
		}
	}

	@description = "Automation ID: LRAC-9048 | Test Summary: Assert the User Management Page"
	@priority = "3"
	test AssertUserManagementPage {

		task ("go to User Manaagement page and assert you are there") {
			ACNavigation.goToSettings();

			ACSettings.goToUserManagement();
		}

	}

	@description = "Automation ID: LRAC-9053 | Test Summary: Member can be edited or removed"
	@ignore = "true"
	@priority = "3"
	test MemberCanBeEditedOrRemoved {

		// TODO LRAC-9053 MemberCanBeEditedOrRemoved

	}

	@description = "Automation ID: LRAC-9054 | Test Summary: Member can be selected in the user list"
	@ignore = "true"
	@priority = "3"
	test MemberCanBeSelected {

		// TODO LRAC-9054 MemberCanBeSelected

	}

	@description = "Automation ID: LRAC-9055 | Test Summary: View list of all users"
	@priority = "3"
	test ViewAllUserList {
		var emailAdress = "user1@liferay.com,user2@liferay.com,user3@liferay.com";

		task ("Go to settings and go to user management") {
			ACNavigation.goToSettings();

			ACSettings.goToUserManagement();
		}

		task ("Add multiples users, go to data sources and go back to user management") {
			ACSettings.addMultiplesOptions(optionsList = "${emailAdress}");

			ACSettings.goToDataSources();

			ACSettings.goToUserManagement();
		}

		task ("Assert the users in the list") {
			for (var user : list "${emailAdress}") {
				ACUtils.searchBar(searchItem = "${user}");

				ACSettings.assertUserListEmail(userEmail = "${user}");
			}
		}
	}

	@description = "Automation ID: LRAC-9049 | Test Summary: Owner cannot be edited or removed"
	@priority = "5"
	test ViewOwnerCannotBeEditedOrRemoved {

		task ("go to User Manaagement page and assert you are there") {
			ACNavigation.goToSettings();

			ACSettings.goToUserManagement();
		}

		task ("search for owner user") {
			ACUtils.searchBar(searchItem = "bryan.cheung@faro.io");
		}

		task ("view owner cannot be edited") {
			ACSettings.viewEditnotAvailable();
		}
		
		task ("view owner cannot be removed") {
			ACSettings.viewDeleteNotAvailable();
		}

	}

	@description = "Automation ID: LRAC-9050 | Test Summary: Owner cannot be selected in the user list"
	@priority = "5"
	test ViewOwnerCannotBeSelectedInUserList {

		task ("go to User Manaagement page and assert you are there") {
			ACNavigation.goToSettings();

			ACSettings.goToUserManagement();
		}

		task ("search for owner user") {
			ACUtils.searchBar(searchItem = "bryan.cheung@faro.io");
		}

		task ("view ownnet cannot be selected") {
			ACSettings.viewUserNotSelectable(email = "bryan.cheung@faro.io");
		}

	}

}